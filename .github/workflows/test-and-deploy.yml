name: Test and Deploy

on:
  push:
    branches: [ main, deploy ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, deploy ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup test environment
      run: |
        echo "Setting up test environment..."
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
    
    - name: Run comprehensive test suite
      run: npm run test:full
      env:
        NODE_ENV: test
        TESTING: true
        # Use production database for integration tests
        TEST_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
    
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.node-version }}
        path: |
          test-reports/
          coverage/
          test-artifacts/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm run security:audit
    
    - name: Check for known vulnerabilities
      run: npm audit --audit-level=high
    
    - name: Run dependency check
      run: npx audit-ci --moderate

  quality:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check test coverage
      run: |
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "Coverage report found"
          cat coverage/coverage-summary.json | jq '.total.lines.pct'
        else
          echo "No coverage report found"
          exit 1
        fi
    
    - name: Validate package.json
      run: |
        npm run test:quick
        echo "Package validation completed"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, quality]
    if: github.ref == 'refs/heads/deploy' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
    
    - name: Run post-deployment tests
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
        # Test health endpoint
        curl -f https://porter-preview.vercel.app/api/health || exit 1
        
        # Test OAuth status endpoint
        curl -f https://porter-preview.vercel.app/api/oauth/status || exit 1
        
        echo "Post-deployment tests passed!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, quality, deploy]
    if: always()
    
    steps:
    - name: Notify test results
      run: |
        echo "üß™ Test Results Summary:"
        echo "Test Job: ${{ needs.test.result }}"
        echo "Security Job: ${{ needs.security.result }}"
        echo "Quality Job: ${{ needs.quality.result }}"
        if [ "${{ needs.deploy.result }}" != "" ]; then
          echo "Deploy Job: ${{ needs.deploy.result }}"
        fi
        
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.quality.result }}" == "success" ]; then
          echo "üéâ All checks passed successfully!"
        else
          echo "‚ùå Some checks failed!"
          exit 1
        fi
